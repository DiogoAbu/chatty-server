# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input ChangePasswordInput {
  code: Float
  password: String
}

input CreateAccountInput {
  email: String
  name: String
  password: String
  pictureUri: String
}

input CreateMessageInput {
  content: String
  messageId: String
  roomId: ID
}

input CreateRoomInput {
  name: String
  pictureUri: String
  recipientsId: [ID]
}

type Device {
  createdAt: Timestamp
  id: ID
  platform: DevicePlatform
  token: String
  user: User
}

"""The acceptable platforms"""
enum DevicePlatform {
  android
  ios
  macos
  web
  windows
}

input ForgotPasswordInput {
  email: String
}

type GetMessagesResponse {
  cursor: Timestamp
  hasMore: Boolean
  items: [Message]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input ListUsersOrder {
  email: String
  name: String
}

input ListUsersWhere {
  email: String
  name: String
}

type Message {
  content: String
  createdAt: Timestamp
  id: ID
  room: Room
  updatedAt: Timestamp
  user: User
}

type Mutation {
  """
  Find the user related to the one-time-password, check its validity, and update the password.
  """
  changePassword(data: ChangePasswordInput): Boolean
  createAccount(data: CreateAccountInput): SignInResponse
  createMessage(data: CreateMessageInput): Message
  createRoom(data: CreateRoomInput): Room

  """
  Find the user, store an one-time-password, and send it to the user`s email.
  """
  forgotPassword(data: ForgotPasswordInput): Boolean
  pushChanges(
    changes: JSON

    """Milliseconds since UNIX epoch"""
    lastPulledAt: Float
  ): Boolean
  registerDevice(data: RegisterDeviceInput): Boolean
  signIn(data: SignInInput): SignInResponse

  """Add signed user as follower"""
  startFollowing(userId: String!): Boolean

  """Remove signed user as follower"""
  stopFollowing(userId: String!): Boolean
}

type Query {
  getMessages(afterDate: Timestamp, limit: Int = 10, roomId: ID): GetMessagesResponse
  getRooms: [Room]
  listUsers(order: ListUsersOrder, skip: Int = 0, take: Int = 10, where: ListUsersWhere): [User]
  me: User
  pullChanges(
    """Milliseconds since UNIX epoch"""
    lastPulledAt: Float
  ): JSON
}

input RegisterDeviceInput {
  platform: DevicePlatform
  token: String
}

type Room {
  createdAt: Timestamp
  id: ID
  lastMessage: Message
  members: [User]
  messages: [Message]
  name: String
  pictureUri: String
  updatedAt: Timestamp
}

input SignInInput {
  email: String
  password: String
}

type SignInResponse {
  token: String
  user: User
}

type Subscription {
  messageCreated(roomIds: [ID]): Message
  roomCreated: Room
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User {
  createdAt: Timestamp
  devices: [Device]
  email: String
  id: ID
  isFollowedByMe: Boolean
  isFollowingMe: Boolean
  lastAccessAt: Timestamp
  name: String
  pictureUri: String
  publicKey: String
  role: String
  rooms: [Room]
  updatedAt: Timestamp
}
